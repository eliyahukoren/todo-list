import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import axios from 'axios';
import { RootState } from "../../app/store";
import { ITodo } from "../../interfaces/todo";

const BASE_URL = process.env.BASE_URL || 'http://localhost:4000';

export interface ToDoState {
  todos: ITodo[];
  isLoading: boolean;
  error: string;
}

const initialState: ToDoState = {
  todos: [],
  isLoading: false,
  error: "",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAllTodos = createAsyncThunk(
  "todos/fetchAll",
  async (_, thunkApi) => {
    try{
      const response = await axios.get<ITodo[]>(`${BASE_URL}/todos`);
      return response.data;
    }catch(err){
      return thunkApi.rejectWithValue('error message');
    }
  }
);

export const todoSlice = createSlice({
  name: 'todos',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addTodo: (state, action: PayloadAction<ITodo>) => {
      let newState = state.todos;
      // todo add action

      state.todos = newState;
    },
    updateTodo: (
      state,
      action: PayloadAction<{ id: string; newItem: string }>
    ) => {
      let newState = state.todos;
      // todo add action

      state.todos = newState;
    },
    deleteTodo: (state, action: PayloadAction<string>) => {
      let newState = state.todos;
      // todo add action

      state.todos = newState;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllTodos.fulfilled.type, (state, action: PayloadAction<ITodo[]>) => {
        state.isLoading = false;
        state.todos = action.payload;
        state.error = '';
      })
      .addCase(fetchAllTodos.pending.type, (state) => {
        state.isLoading = true;
      })
      .addCase(fetchAllTodos.rejected.type, (state, action: PayloadAction<string>) => {
        state.isLoading = false;
        state.error = action.payload;
      });
  },
});

export const { addTodo, updateTodo, deleteTodo } = todoSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTodo = (state: RootState) => state.todo;

export default todoSlice.reducer;
