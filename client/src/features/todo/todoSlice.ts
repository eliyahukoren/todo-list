import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { fetchAllTodos, deleteTodoAPI } from "./todoAPI";

export interface ToDoState {
  todos: ITodo[];
  isLoading: boolean;
  error: string;
}

const initialState: ToDoState = {
  todos: [],
  isLoading: false,
  error: "",
};

export const todoSlice = createSlice({
  name: "todos",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addTodoAction: (state, action: PayloadAction<ITodo>) => {
      let newState = state.todos;
      newState.push(action.payload);

      state.todos = newState;
    },
    updateTodoStatusAction: (
      state,
      action: PayloadAction<string>
    ) => {
      let newState = state.todos;
      newState.map((item) => {
        if (item.id === action.payload) {
          item.status = !item.status;
        }
      });

      state.todos = newState;
    },
    deleteTodoAction: (state, action: PayloadAction<string>) => {
      let newState = state.todos.filter((item) => item.id !== action.payload);

      state.todos = newState;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(
        fetchAllTodos.fulfilled,
        (state, action: PayloadAction<ITodo[]>) => {
          state.isLoading = false;
          state.todos = action.payload;
          state.error = "";
        }
      )
      .addCase(fetchAllTodos.pending.type, (state) => {
        state.isLoading = true;
      })
      .addCase(
        fetchAllTodos.rejected.type,
        (state, action: PayloadAction<string>) => {
          state.isLoading = false;
          state.error = action.payload;
        }
      )
      .addCase(deleteTodoAPI.fulfilled, (state) => {
        state.isLoading = false;
      })
      .addCase(deleteTodoAPI.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(
        deleteTodoAPI.rejected.type,
        (state, action: PayloadAction<string>) => {
          state.isLoading = false;
          state.error = action.payload;
        }
      );
  },
});

export const { addTodoAction, updateTodoStatusAction, deleteTodoAction } = todoSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTodo = (state: RootState) => state.todos;

export default todoSlice.reducer;
