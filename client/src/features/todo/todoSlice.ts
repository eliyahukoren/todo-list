import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { ITodo } from "../../interfaces/todo";
import { fetchAllTodos } from "./todoAPI";

export interface ToDoState {
  todos: ITodo[];
  isLoading: boolean;
  error: string;
}

const initialState: ToDoState = {
  todos: [],
  isLoading: false,
  error: "",
};

export const todoSlice = createSlice({
  name: 'todos',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addTodo: (state, action: PayloadAction<ITodo>) => {
      let newState = state.todos;
      // todo add action

      state.todos = newState;
    },
    updateTodo: (
      state,
      action: PayloadAction<{ id: string; newItem: string }>
    ) => {
      let newState = state.todos;
      // todo add action

      state.todos = newState;
    },
    deleteTodo: (state, action: PayloadAction<string>) => {
      let newState = state.todos;
      // todo add action

      state.todos = newState;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllTodos.fulfilled.type, (state, action: PayloadAction<ITodo[]>) => {
        console.log("fulfilled");
        console.log({was: state.todos});
        state.isLoading = false;
        state.todos = action.payload;
        state.error = '';
        console.log({ now: state.todos });
      })
      .addCase(fetchAllTodos.pending.type, (state) => {
        console.log('pending');
        state.isLoading = true;
      })
      .addCase(fetchAllTodos.rejected.type, (state, action: PayloadAction<string>) => {
        console.log("rejected");
        state.isLoading = false;
        state.error = action.payload;
      });
  },
});

export const { addTodo, updateTodo, deleteTodo } = todoSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTodo = (state: RootState) => state.todos;

export default todoSlice.reducer;
